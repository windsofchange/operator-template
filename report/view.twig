{% extends parent_template %}

{% block sidebar %}
    {% include 'operator.' ~ template ~ '.report.sidebar' %}
{% endblock %}

{% block title %}
    {{ Lang.choice('report.report', 2) }} - {{ report.title }}
{% endblock %}

{% block description %}
    {{ report.description }}
{% endblock %}

{% block content %}

    {% if report.timeframe|default is not empty and report.timeframe != 'none' %}
        <div class="sp-alert">
            <div class="timeframe-options sp-flex sp-flex-wrap sp-items-center md:sp-flex-no-wrap">
                <div class="sp-w-full md:sp-flex-grow md:sp-w-auto">
                    {% if report.timeframe == 'custom' %}
                        <label class="sp-block sp-mb-2 sp-mr-2 xs:sp-inline-block xs:sp-mb-0">
                            {{ form_radio('timeframe', 0, report.startDate == 0 ? true : false) }} <strong>{{ Lang.get('report.all_time') }}</strong>
                        </label>
                        <label class="sp-block sp-mr-2 xs:sp-inline-block">
                            {{ form_radio('timeframe', 1, report.startDate != 0 ? true : false) }} <strong>{{ Lang.get('report.specific_range') }}</strong>
                        </label>
                        <span class="timeframeOptions sp-block sp-mt-2 {% if report.startDate == 0 %}sp-hidden{% endif %}">
                            <span class="sp-block sp-mb-2 sp-mr-2 sm:sp-inline-block sm:sp-mb-0">
                                {{ Lang.get('general.start') }}:&nbsp;
                                {{ form_text('startDate', report.startDate|date(Config.get('settings.date_format')), {'class': 'datepicker sp-w-40', 'placeholder': '&#xf073; &nbsp;' ~ Lang.get('general.start_date')}) }}
                            </span>
                            <span class="sp-block sp-mr-2 sm:sp-inline-block">
                                {{ Lang.get('general.end') }}:&nbsp;
                                {{ form_text('endDate', report.endDate|date(Config.get('settings.date_format')), {'class': 'datepicker sp-w-40', 'placeholder': '&#xf073; &nbsp;' ~ Lang.get('general.start_date')}) }}
                            </span>
                        </span>
                    {% else %}
                        {% if report.timeframe == 'monthly' %}
                            {{ form_selectMonth('month', report.startDate|date('n')) }}
                        {% endif %}

                        {{ form_select('year', year, report.startDate|date('Y')) }}
                    {% endif %}
                </div>
                <div class="sp-w-full sp-mt-3 md:sp-flex-none md:sp-w-auto md:sp-mt-0 md:sp-ml-3">
                    {{ form_button(Lang.get('general.update'), {'class': 'sp-button-submit updateReport'}) }}
                </div>
            </div>
        </div>
    {% endif %}

    {% include 'operator.' ~ template ~ '.report.condition_group' %}

    <div class="sp-loading sp-p-3 sp-bg-secondary sp-rounded sp-text-center sp-hidden">
        {{ Lang.get('general.loading') }}<i class="sp-ellipsis"><i>.</i><i>.</i><i>.</i></i>
    </div>

    <div class="reportContent">

        {% if in_array('table', report.charts) and report.charts|length != 1 %}
        <ul class="sp-tabs">
            <li class="{% if report.charts[0] != 'table' %}type-active sp-active{% endif %}">
                <a>{{ Lang.get('report.chart') }}</a>
            </li>
            <li class="{% if report.charts[0] == 'table' %}type-active sp-active{% endif %}">
                <a>{{ Lang.get('report.table') }}</a>
            </li>
        </ul>
        {% endif %}

        <div id="chartWrapper" {% if report.charts[0] == 'table' %}class="hide"{% endif %}>
            <div style="text-align: center;" {% if (in_array('table', report.charts) and report.charts|length <= 2) or (not in_array('table', report.charts) and report.charts|length == 1) %}class="hide"{% endif %}>
                <strong>{{ Lang.get('general.type') }}:</strong> &nbsp;
                <select name="chartType">
                    {% for value, name in defaultCharts  %}
                        {% if in_array(value, report.charts) %}
                            <option value="{{ value }}" {% if loop.first %}selected="selected"{% endif %}>{{ name }}</option>
                        {% endif %}
                    {% endfor %}
                </select>
            </div>
          <div id="chartView" class="sp-w-full sp-h-96 md:sp-h-128"></div>
        </div>

        {% if in_array('table', report.charts) %}
            <div id="tableView" {% if report.charts|length != 1 and report.charts != 'table' %}class="sp-hidden"{% endif %}></div>
        {% endif %}

    </div>

{% endblock %}

{% block scripts_footer %}
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

    <script src="{{ asset_rev('resources/assets/libs/datatables/js/jquery.dataTables.min.js') }}"></script>
    <script type="text/javascript" src="{{ asset_rev('resources/assets/libs/datatables/js/datatables.net-buttons.min.js') }}"></script>

    <script src="{{ asset_rev('resources/assets/operator/js/filtering.js') }}"></script>

    <script type="text/javascript">
        var chartData, startTimestamp, endTimestamp;

        // Load charts
        google.charts.load('45', {packages: ['corechart']});
        google.charts.setOnLoadCallback(function () {
            loadChart(JSON.parse('{{ report.data|escape('js') }}'));
        });

        $(document).ready(function() {
            // Expand the filtering box on click
            $(document).on('click', '.sp-condition-group-header', function () {
                // If we're toggling to show and it's currently empty, insert new condition
                if ($('.filter-conditions').is(':visible') && ! $('.filter-conditions .condition:visible').length) {
                    $('.filter-conditions .add-condition').trigger('click');
                }
            });

            // Date pickers
            $('input[name="startDate"], input[name="endDate"]').datepicker();

            var timeframe = '{{ report.timeframe }}';

            $(document.body).on('click', '.updateReport', function() {
                var startDate = null,
                    endDate = null;

                // Depending on timeframe
                if (timeframe == 'yearly' || timeframe == 'monthly') {
                    if (timeframe == 'monthly') {
                        // Monthly - Get new start and end date
                        startDate = $('<input>').datepicker({
                            defaultDate: new Date($('select[name="year"]').val(), parseInt($('select[name="month"]').val() - 1), 1, 0, 0, 0, 0)
                        }).val();
                        endDate = $('<input>').datepicker({
                            defaultDate: new Date($('select[name="year"]').val(), $('select[name="month"]').val(), 0, 0, 0, 0, 0)
                        }).val();
                    } else {
                        // Yearly - Get new start and end date
                        startDate = $('<input>').datepicker({
                            defaultDate: new Date($('select[name="year"]').val(), 0, 1, 0, 0, 0, 0)
                        }).val();
                        endDate = $('<input>').datepicker({
                            defaultDate: new Date($('select[name="year"]').val(), 11, 31, 0, 0, 0, 0)
                        }).val();
                    }
                } else {
                    // Specific range
                    if ($('input[name="timeframe"]:checked').val() == 1) {
                        startDate = $('input[name="startDate"]').val();
                        endDate = $('input[name="endDate"]').val();
                    }
                }

                // Fetch new data and update
                getData(startDate, endDate);
            });

            // Changing options on custom timeframe
            $('input[name="timeframe"]').on('change', function() {
                if ($(this).val() == 1) {
                    $('.timeframeOptions').show();
                } else {
                    $('.timeframeOptions').hide();
                }
            });

            // For switching between chart and table
            $('.sp-tabs').on('click', 'li:not(.type-active)', function() {
                $('#chartWrapper, #tableView').toggle();
                $('.sp-tabs li').removeClass('type-active');
                $(this).addClass('type-active');
                if ($('#chartWrapper').is(':visible')) {
                    drawChart(chartData, $('select[name="chartType"]').val());
                }
            });

            // Changing chart type
            $('select[name="chartType"]').on('change', function() {
                drawChart(chartData, $(this).val());
            });
        });

        // Fetches new data based on time parameters
        function getData(startDate, endDate) {
            $('.sp-loading').show();
            $('.reportContent').hide();

            var data = $(".sp-condition-group").serializeArray();
            data.push({name: 'startDate', value: startDate});
            data.push({name: 'endDate', value: endDate});

            $.post(
                laroute.route("report.operator.getData", {category: "{{ report.category }}", name: "{{ report.slug }}"}),
                data,
                function(response) {
                    // Remove loading from view
                    $('.sp-loading').hide();

                    // Remove the existing table if it exists
                    $('.dataTables_wrapper').remove();
                    $('.reportContent').show();

                    // Parse data and load chart
                    loadChart(JSON.parse(response.data));
                },
                "json"
            );
        }

        // Recursively decode HTML entities.
        function decodeHtmlEntities(item) {
            if (item instanceof Array) {
                return array_map(decodeHtmlEntities, item);
            } else if (typeof item === 'string') {
                return he.decode(item);
            } else {
                return item;
            }
        }

        // Takes the data and converts it to a chart friendly format
        function loadChart(data) {
            // Draw the Google chart.
            // Decode HTML entities as Google charts displays as-is (DEV-888).
            chartData = google.visualization.arrayToDataTable(array_map(decodeHtmlEntities, data));
            drawChart(chartData, $('select[name="chartType"]').val());

            var head = [];

            // Create table heading
            $.each(data[0], function(key, val) {
                var obj = {};
                obj["title"] = val;
                head.push(obj);
            });

            // Remove heading from data
            data.splice(0,1);

            $('#tableView').append('<table class="sp-table-grid" style="width: 100%"></table>');

            // Set data table
            $('#tableView .sp-table-grid').dataTable({
                "columns": head,
                "data": data,
                "order": [],
                "dom": '<"sp-mb-6 sp-ml-6"B>lfrtip',
                "pageLength": {{ Config.get('settings.operator' ~ auth_user().id ~ '.datatable_rows', 10) }},
                "buttons": [
                    {
                        extend: 'print',
                        autoPrint: false,
                        className: 'sp-button',
                        exportOptions: {
                            // Don't decode entities as it's already decoded
                            decodeEntities: false
                        }
                    },
                    {
                        extend: 'csv',
                        className: 'sp-button',
                    },
                    {
                        extend: 'pdf',
                        className: 'sp-button',
                    },
                    {
                        extend: 'excel',
                        className: 'sp-button',
                    }
                ]
            });
        }

        // Draws the chart from the data and type of chart
        function drawChart(data, type) {
            try {
                var colour = spCssVarThemes.dark['--color-text-primary'];
                var chartTextStyle = $('body').hasClass('sp-theme-dark') ? {color: colour} : {};
                var defaultOpts = {
                    backgroundColor: { fill:'transparent' },
                    vAxis: {
                        textStyle: chartTextStyle,
                        titleTextStyle: chartTextStyle,
                        baselineColor: colour,
                        gridlines: {
                            color: colour
                        }
                    },
                    hAxis: {
                        textStyle: chartTextStyle,
                        titleTextStyle: chartTextStyle,
                        baselineColor: colour,
                        gridlines: {
                            color: colour
                        }
                    },
                    legend:{
                        textStyle: chartTextStyle,
                        position: "bottom"
                    }
                };

                if (type === 'pie') {
                    // Configure chart
                    var chart = new google.visualization.PieChart(document.getElementById('chartView'));
                    var options = {
                        'pieSliceText': 'value',
                        'legend': {
                            position: 'right'
                        },
                        'sliceVisibilityThreshold': 0
                    };
                } else if (type === 'bar') {
                    var chart = new google.visualization.BarChart(document.getElementById('chartView'));
                    var options = {};
                } else if (type === 'column') {
                    var chart = new google.visualization.ColumnChart(document.getElementById('chartView'));
                    var options = {};
                } else if (type === 'histogram') {
                    var chart = new google.visualization.Histogram(document.getElementById('chartView'));
                    var options = {
                        legend: { position: 'none' }
                    };
                } else if (type === 'line') {
                    var chart = new google.visualization.LineChart(document.getElementById('chartView'));
                    var options = {};
                } else if (type === 'area') {
                    var chart = new google.visualization.AreaChart(document.getElementById('chartView'));
                    var options = {};
                } else if (type === 'stacked') {
                    var chart = new google.visualization.AreaChart(document.getElementById('chartView'));
                    var options = {
                        isStacked: true
                    };
                } else if (type === 'stepped') {
                    var chart = new google.visualization.SteppedAreaChart(document.getElementById('chartView'));
                    var options = {
                        isStacked: true
                    };
                } else if (type === 'geo') {
                    var chart = new google.visualization.GeoChart(document.getElementById('chartView'));
                    var options = {};
                }
                // Draw chart
                chart.draw(data, $.extend(true, {}, defaultOpts, options));
            } catch(err) {
                // Nothing to do here...
            }
        }
    </script>
{% endblock %}
