{% extends parent_template %}

{% block title %}
    {% if record|default is not empty and record.exists %}
        {{ record.formatted_name }}
        {% if auth_user().hasPermission('update.user') %}
            - {{ Lang.get('general.edit_item', {'item': Lang.choice('user.user', 1)}) }}
        {% endif %}
    {% else %}
        {{ Lang.get('general.add_item', {'item': Lang.choice('user.user', 1)}) }}
    {% endif %}
{% endblock %}

{% block precontent %}
    <div class="sp-alert sp-alert-success sp-alert-sticky sp-hidden action">
        {{ Lang.get('messages.success_action') }}
    </div>
    <div class="sp-alert sp-alert-error sp-alert-sticky sp-hidden action">
        {{ Lang.get('messages.error_action') }}
    </div>
{% endblock %}

{% block content %}

    {% if record|default is not empty and record.exists %}
        {% include 'operator.' ~ template ~ '.user.forms.user_tabs' %}

        {{ form_model(record, { 'route': [ 'user.operator.user.update', record.id ], 'method': 'PUT', 'files': true, 'class': 'edit-user validate' }) }}
    {% else %}
        {{ form_open({ 'route': 'user.operator.user.store', 'files': true, 'class': 'validate' }) }}
    {% endif %}

        <h2>{{ Lang.get('user.profile') }}</h2>

        <div class="sp-form-container">
            {% include 'operator.' ~ template ~ '.user.forms.profile' with { 'managing': true } %}

            {% if record|default is not empty and record.exists %}
                <div class="sp-form-row">
                    <label>{{ Lang.choice('general.export', 2) }}</label>
                    <div class="sp-input-container">
                        {% if record.exports is not empty or record.exportqueue is not empty %}
                            <ul class="exports-list sp-attached-files sp-mb-3">
                                {% for export in record.exports %}
                                    <li class="sp-flex">
                                        <div class="sp-mr-2 sp-truncate">
                                            <i class="fas fa-file fa-fw"></i>&nbsp;

                                            <span class="sp-file-information">
                                                <span class="sp-filename">
                                                    <a href="{{ route('core.operator.export.download', export.upload_hash) }}">
                                                        {{ export.upload.filename }}
                                                    </a>
                                                </span>
                                                <span class="sp-description sp-filesize">({{ export.upload.size }})</span>
                                            </span>
                                        </div>

                                        <div class="sp-delete-attachment sp-bg-red-600"
                                             data-url="{{ route('core.operator.export.destroy', export.upload_hash) }}">
                                            <i class="fas fa-times sp-text-white"></i>
                                        </div>
                                    </li>
                                {% endfor %}
                                {% for export in record.exportqueue %}
                                    <li>
                                        <i class="fas fa-spin fa-spinner fa-fw"></i>&nbsp;
                                        {{ Lang.get('messages.in_progress') }}
                                        <span class="sp-description sp-filesize">({{ formatDate(export.created_at) }})</span>
                                    </li>
                                {% endfor %}
                            </ul>
                        {% endif %}

                        <button class="export-user" type="button">{{ Lang.get('core.export_data') }}</button>
                        <div class="sp-description">{{ Lang.get("core.export_data_desc") }}</div>

                        <div class="sp-alert sp-alert-info sp-alert-bottom sp-hidden export-scheduled">
                            {{ Lang.get('core.export_data_scheduled') }}
                        </div>
                    </div>
                </div>
            {% endif %}
        </div>

        {% if Config.get('settings.organisations_enabled') %}
            <h2>{{ Lang.choice('user.organisation', 1) }}</h2>

            <div class="sp-form-container">
                {% include 'operator.' ~ template ~ '.user.forms.organisation' %}
            </div>
        {% endif %}

        {% if customfields is not empty %}
            <div class="user-customfields">
                <h2>{{ Lang.get('general.custom_fields') }}</h2>

                <div class="sp-form-container">
                    {% include 'operator.' ~ template ~ '.forms.custom_fields' with {'operator': true} %}
                </div>
            </div>
        {% endif %}

        {% if linkedTable is not empty %}
            <div class="user-customfields">
                <h2>{{ Lang.get('user.linked_accounts') }}</h2>

                {{ linkedTable.render()|raw }}
            </div>
        {% endif %}

        <div class="sp-form-button">
            {{ form_submit(Lang.choice('general.submit', 1)) }}
            {% if record.exists and not operator and auth_user().hasPermission('delete.user') %}
                <button class="delete-user" type="button">{{ Lang.get('general.delete', {'item': Lang.choice('user.user', 1)}) }}</button>
            {% endif %}
        </div>

    {{ form_close() }}

{% endblock %}

{% block scripts_footer %}
    {% if jsValidator|default is not empty %}
        {{ jsValidator|raw }}
    {% endif %}

    {% if linkedTable is not empty %}
        <script src="{{ asset_rev('resources/assets/libs/datatables/js/jquery.dataTables.min.js') }}"></script>
        {{ linkedTable.script()|raw }}
    {% endif %}

    <!-- Redactor -->
    <script src="{{ asset_rev('resources/assets/libs/editor.min.js') }}"></script>
    <script src="{{ asset_rev('resources/assets/general/js/editor_config.js') }}"></script>

    <!-- Custom fields -->
    <script src="{{ asset_rev('resources/assets/general/js/customfields.js') }}"></script>

    <script src="{{ asset_rev('resources/assets/operator/js/randomPassword.js') }}"></script>

    <script type="text/javascript" src="{{ asset_rev('resources/assets/general/js/linked_account.js') }}"></script>

    <script type="text/javascript" src="{{ asset_rev('resources/assets/general/js/user.js') }}"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            // Toggle the password fields depending on whether we're sending a confirmation email
            $('input[name="send_email"]').on('click', function() {
                $('.password-field').toggle();
                $('.password-field button.hideShowPassword-toggle').trigger('click').trigger('click');
            });

            // Toggle the password fields, depending on how the page loads (when an error occurs, the form resets to
            // how it was before the error occured
            if ($('input[name=send_email]').length && $('input[name=send_email]').is(':checked') == false) {
                $('.password-field').toggle();
            }

            // Enable hide/show password toggle
            $('input[type=password]').hideShowPassword();

            // Generate a new random password
            $('a#generatePassword').on('click', function() {
                var password = randomPassword(8);

                if (document.getElementById('password').type == 'text') {
                    document.getElementById('password').value=password;
                } else {
                    document.getElementById('password').type='text';
                    document.getElementById('password').value=password;
                    document.getElementById('password').type='password';
                }
            });

            // Date picker
            $('.datepicker').datepicker();

            $('select[name="groups[]"]').selectize({
                plugins: ['remove_button'],
                delimiter: ',',
                placeholder: Lang.get('user.select_group')
            });

            if ($('select[name="organisation"]').val() == null) {
                $('select[name="organisation_access_level"]').prop('disabled', true);
                $('.access-level').hide();
            }

            var $organisationSelectize = $('select[name="organisation"]').selectize({
                valueField: 'id',
                labelField: 'name',
                searchField: 'name',
                create: true,
                placeholder: "{{ Lang.get('user.select_or_new_organisation') }}",
                allowEmptyOption: true,
                load: function(query, callback) {
                    if (!query.length) return callback();
                    $.ajax({
                        url: "{{ route('user.organisation.search') }}",
                        type: 'GET',
                        dataType: 'json',
                        data: {
                            q: query,
                            brand_id: $(':input[name="brand_id"]').val()
                        },
                        error: function() {
                            callback();
                        },
                        success: function(res) {
                            callback(res.data);
                        }
                    });
                },
                onChange: function(value) {
                    // If they enter an existing organisation.
                    if (value.length > 0 && value !== this.getOption(value)[0].textContent) {
                        // Set separate field with organisation ID
                        $('input[name="organisation_id"]').val(value);

                        // Re-enable dropdown
                        $('select[name="organisation_access_level"]').prop('disabled', false);
                        $('.access-level').show();
                    } else {
                        $('input[name="organisation_id"]').val("");

                        if (value == '') {
                            // No organisation set, hide access level.
                            $('.access-level').hide();
                        } else {
                            // Disable dropdown and set to owner as it's a new organisation
                            $('select[name="organisation_access_level"]').val(0).prop('disabled', true);
                            $('.access-level').show();
                        }
                    }

                    // Handle notifications option showing/hiding
                    $('select[name="organisation_access_level"]').trigger('change');

                    // Hide view organisation button
                    $('.view-organisation').hide();
                }
            });

            // Show notifications options for managers only
            $('select[name="organisation_access_level"]').on('change', function() {
                if ($(this).val() == 1 || ! $(this).is(':visible')) {
                    $('.organisation-notifications').addClass('sp-hidden').find(':input').prop('disabled', true);
                } else {
                    $('.organisation-notifications').removeClass('sp-hidden').find(':input').prop('disabled', false);
                }
            });

            // Send confirmation email
            $('.confirmation-email').on('click', function() {
                var $this = $(this);
                $this.prop('disabled', true);

                $.post(
                    laroute.route(
                        'user.operator.user.confirmation_email',
                        { id: {{ record|default is not empty and record.exists ? record.id : 'null' }} }
                    ),
                    { },
                    function(response) {
                        if (response.status == 'success') {
                            $('.action.success').show(500).delay(5000).hide(500);
                        } else {
                            $('.action.fail').show(500).delay(5000).hide(500);
                        }

                        $this.prop('disabled', false);
                    },
                    "json"
                ).fail(function() {
                    $('.action.fail').show(500).delay(5000).hide(500);
                    $this.prop('disabled', false);
                });
            });

            // Mark as confirmed
            $('.mark-confirmed').on('click', function() {
                var $this = $(this);
                $this.prop('disabled', true);

                $.post(
                    laroute.route(
                        'user.operator.user.mark_confirmed',
                        { id: {{ record|default is not empty and record.exists ? record.id : 'null' }} }
                    ),
                    { },
                    function(response) {
                        if (response.status == 'success') {
                            // Refresh the page.
                            window.location.reload();
                        } else {
                            $('.action.fail').show(500).delay(5000).hide(500);
                        }

                        $this.prop('disabled', false);
                    },
                    "json"
                ).fail(function() {
                    $('.action.fail').show(500).delay(5000).hide(500);
                    $this.prop('disabled', false);
                });
            });

            // Reset password link
            $('.reset-password').on('click', function() {
                var $this = $(this);
                $this.prop('disabled', true);

                $.post(
                    laroute.route(
                        'user.operator.user.resetpassword',
                        { id: {{ record|default is not empty and record.exists ? record.id : 'null' }} }
                    ),
                    { },
                    function(response) {
                        if (response.status == 'success') {
                            $('.action.success').show(500).delay(5000).hide(500);
                        } else {
                            $('.action.fail').show(500).delay(5000).hide(500);
                        }

                        $this.prop('disabled', false);
                    },
                    "json"
                ).fail(function() {
                    $('.action.fail').show(500).delay(5000).hide(500);
                    $this.prop('disabled', false);
                });
            });

            {% if record.exists and not operator %}
                // Delete user button
                $('.delete-user').on('click', function() {
                    var section = '{{ Lang.choice('user.user', 1) }}',
                        name = $('<div/>').text($('input[name=email]').val()).html(),
                        relations = {{ relations|json_encode|raw }};

                    var showAlert = function () {
                        return (new deleteAlert({}))
                            .fireDefault(section, name, relations);
                    };

                    showAlert().then(function (result) {
                        if (result.value) {
                            // Go to user list
                            $('body').append($('<form class="delete" action="' + laroute.route('user.operator.user.destroy_redirect', { id: {{ record.id }} }) + '" method="POST">'
                                + '<input name="_method" type="hidden" value="DELETE" />'
                                + '<input name="_token" type="hidden" value="' + $('meta[name=csrf_token]').prop('content') + '">'
                                + '</form>'));

                            $('form.delete').trigger('submit');

                            // Reshow with loading state.
                            showAlert();
                            Swal.showLoading();
                        }
                    });
                });

                // Export user button
                $('.export-user').on('click', function() {
                    var $this = $(this);

                    // Show the alert
                    Swal.fire({
                        title: '{{ Lang.get("core.export_data") }}',
                        html: '<p class="sp-mt-0">{{ Lang.get("core.export_data_select") }}</p>'
                            + '<form class="export-form" style="text-align: left;">'
                            + '<div class="row">'
                                + '<div class="item item50"><label>{{ form_check("activity_log", 1, true) }} {{ Lang.get("user.activity_log") }}</label></div>'
                                + '<div class="item item50"><label>{{ form_check("article_rating", 1, true) }} {{ Lang.choice("selfservice.article_rating", 2) }}</label></div>'
                            + '</div>'
                            + '<div class="row">'
                                + '<div class="item item50"><label>{{ form_check("comment", 1, true) }} {{ Lang.choice("selfservice.comment", 2) }}</label></div>'
                                + '<div class="item item50"><label>{{ form_check("comment_rating", 1, true) }} {{ Lang.choice("selfservice.comment_rating", 2) }}</label></div>'
                            + '</div>'
                            + '<div class="row">'
                                + '<div class="item item50"><label>{{ form_check("email_log", 1, true) }} {{ Lang.get("core.email_log") }}</label></div>'
                                + '<div class="item item50"><label>{{ form_check("failed_login", 1, true) }} {{ Lang.choice("user.failed_login", 2) }}</label></div>'
                            + '</div>'
                            + '<div class="row">'
                                + '<div class="item item50"><label>{{ form_check("feedback_log", 1, true) }} {{ Lang.get("ticket.feedback") }}</label></div>'
                                + '<div class="item item50"><label>{{ form_check("ticket", 1, true) }} {{ Lang.choice("ticket.ticket", 2) }}</label></div>'
                            + '</div>'
                            + '<div class="row">'
                                + '<div class="item item50"><label>{{ form_check("user_organisation", 1, true) }} {{ Lang.choice("user.organisation", 1) }}</label></div>'
                            + '</div></div>',
                        showCancelButton: true,
                        confirmButtonColor: "#3B91CE",
                        confirmButtonText: "{{ Lang.get('general.generate') }}",
                        showLoaderOnConfirm: true,
                        preConfirm: function () {
                            var params = {
                                url: "{{ route('core.operator.export.user', record.id) }}",
                                data: $(Swal.getContent()).find('.export-form').serialize(),
                                type: 'POST',
                                dataType: 'json'
                            };

                            return $.ajax(params)
                                .then(function (response) {
                                    if (response.status == 'success') {
                                        return response;
                                    }

                                    throw new Error(response.statusText);
                                })
                                .catch(function () {
                                    Swal.showValidationMessage(Lang.get('messages.general_error'));
                                });
                        },
                        allowOutsideClick: function () {
                            return ! Swal.isLoading();
                        }
                    }).then(function (result) {
                        if (result.value) {
                            $this.parent().find('.export-scheduled').show();
                        }
                    });
                });

                // Delete existing exports
                $('.exports-list .sp-delete-attachment').on('click', function() {
                    var row = $(this).parent(),
                        name = row.find('.filename').text(),
                        url = $(this).data('url');

                    // Show the alert
                    Swal.fire({
                        title: Lang.get('messages.delete_record', {record: "{{ Lang.choice('general.export', 1) }}"}),
                        html: '<div style="text-align: left">'
                                + '<div class="sp-alert sp-alert-warning">'
                                    + '<i class="fas fa-exclamation-triangle" aria-hidden="true"></i> &nbsp;'
                                    + Lang.get('messages.cannot_be_undone')
                                + '</div>'
                                + Lang.get('messages.warn_delete', {name: name, record: "{{ Lang.choice('general.export', 1) }}"})
                            + '</div>',
                        showCancelButton: true,
                        confirmButtonColor: "#e74c3c",
                        confirmButtonText: Lang.get('messages.delete_confirm', {record: "{{ Lang.choice('general.export', 1) }}"}),
                        width: 550,
                        showLoaderOnConfirm: true,
                        preConfirm: function () {
                            return $.ajax({ url: url, type: 'DELETE' })
                                .then(function (response) {
                                    if (response.status == 'success') {
                                        return response;
                                    }

                                    throw new Error(response.statusText);
                                })
                                .catch(function () {
                                    Swal.showValidationMessage(Lang.get('messages.error_deleted', {'item': "{{ Lang.choice('general.export', 1) }}"}));
                                });
                        },
                        allowOutsideClick: function () {
                            return ! Swal.isLoading();
                        }
                    }).then(function (result) {
                        if (result.value) {
                            if (row.parent().find('li').length == 1) {
                                // Check if this is the last item in list, if so delete list
                                row.parent().remove();
                            } else {
                                // Else just delete row
                                row.remove();
                            }

                            // Show success message
                            Swal.fire(
                                Lang.get('messages.deleted'),
                                Lang.get('messages.success_deleted', {'item': "{{ Lang.choice('general.export', 1) }}"}),
                                'success'
                            );
                        }
                    });
                });
            {% endif %}

            // If on edit page and in 'show' mode (no update permission)
            {% if record|default is not empty and record.exists
                and not auth_user().hasPermission('update.user') %}
                // Hide password fields
                $('.password-field').hide();
                $('.reset-password').parents('.form-row').hide();

                // Convert input fields to plain text
                $('.edit-user :input').not('[type=hidden]').replaceWith(function() {
                    var value = $(this).val();

                    // Checkboxes
                    if ($(this).is('[type=checkbox]')) {
                        if ($(this).parents('.input-group').length) {
                            if ($(this).is(':checked')) {
                                return '<span></span>';
                            } else {
                                $(this).parent().add($(this).parent().next()).remove();
                                return;
                            }
                        } else {
                            value = $(this).is(':checked') ? Lang.get('general.yes') : Lang.get('general.no');
                        }
                    }

                    // Dropdowns
                    if ($(this).is('select')) {
                        if (value != '') {
                            value = $.map(
                                $(this).find('option:selected'),
                                function(element) { return $(element).text(); }
                            ).join(', ');
                        } else {
                            value = 'None';
                        }
                    }

                    // Radio buttons
                    if ($(this).is('[type=radio]')) {
                        if ($(this).is(':checked')) {
                            return '<span></span>';
                        } else {
                            $(this).parent().add($(this).parent().next()).remove();
                            return;
                        }
                    }

                    // Buttons, Files and Submits
                    if ($(this).is('[type=file]') || $(this).is('[type=submit]') || $(this).is('button')) {
                        return '<span></span>';
                    }

                    // Text/textarea fields
                    if (value == '') {
                        value = Lang.get('general.na');
                    }

                    return '<span>' + value + '</span>'
                });

                // For checklists and radio fields, if there are none selected
                $('.input-group:not(:has(label))').append('<span>' + Lang.get('general.none') + '</span>');

                // Hide selectize boxes
                $('.selectize-control').remove();
            {% endif %}

            // Only applies when creating a user as the brand can be changed
            {% if not record.exists %}
                // Brand and custom fields membership assignment
                var brandCustomFields = JSON.parse('{{ brandCustomFields|raw }}');

                // Change the custom fields to show when the brand is changed
                $(':input[name="brand_id"]').on('change', function() {
                    var brandId = $(this).val();

                    // Clear the organisation. Organisation field may not be present if organisations are disabled.
                    if (typeof $organisationSelectize[0] !== 'undefined') {
                        $organisationSelectize[0].selectize.clearOptions();
                    }

                    // Check if each field exists in the currently selected brand
                    $('[data-field]').each(function () {
                        if (brandCustomFields[brandId].indexOf($(this).data('field')) === -1) {
                            $(this).find(':input').prop('disabled', true);
                            $(this).hide();
                        } else {
                            $(this).find(':input').prop('disabled', false);

                            var dependsOn = $(this).data('depends-on-option');
                            if (typeof dependsOn === 'number') {
                                $('option[value="'+dependsOn+'"]:selected').is(':visible') ? $(this).show() : $(this).hide();
                            } else {
                                $(this).show();
                            }
                        }
                    });

                    // Do we have any fields for this brand? If not, just hide the section
                    if (brandCustomFields[brandId].length) {
                        $('.user-customfields').show();
                    } else {
                        $('.user-customfields').hide();
                    }
                });

                // Run above code when page loads to remove any fields it shouldn't show for default brand
                $(':input[name="brand_id"]').trigger('change');
            {% endif %}
        });
    </script>
{% endblock %}
